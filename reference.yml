---
# ===============================================================================
- Classes:
# ===============================================================================

  - Class:
    - Ruby: |
        class ClassName
          def meth
            # ...
          end
        end
    - Python: |
        class ClassName:
          def meth(self):
            # ...
    - PHP: |
        class ClassName {
          public function meth() {
            // ...
          }
        }
    - JavaScript: |
        // Many ways; this one's used often:
        ClassName = function() {
          this.meth = function() { /* ... */ }
          return this;
        };

  - Class inheritance:
    - Ruby: |
        class ClassName < Parent
    - Python: |
        class C(Parent):
    - PHP: |
        class ClassName extends Parent
    - JavaScript: |
        // ...

  - Multiple inheritance:
    - Ruby: |
    - Python: |
        class ClassName(Parent1, Parent2):
    - PHP: |
    - JavaScript: |

  - Instanciation:
    - Ruby: |
        instance = C.new
        instance = C.new(args)
    - Python: |
        instance = C()
        instance = C(args)
    - PHP: |
        $instance = new C();
        $instance = new C($args);
    - JavaScript: |
        var instance = new C();
        var instance = new C(args);

  - Subclass checking:
    - Ruby: |
        if instance.is_a?(ClassName)
    - Python: |
        if isinstance(instance, ClassName):
        # Also, issubclass(ClassName, Parent)
    - PHP: |
        if ($instance instanceof ClassName)
        if (is_instance_of($instance, ClassName))
    - JavaScript: |
        // ...

  - Getting the class:
    - Ruby: |
        instance.class #=> ClassNmae
    - Python: |
        instance.__class__ #=> ClassName
    - PHP: |
        __CLASS__ // from within
        get_class($instance) #=> 'ClassName'
    - JavaScript: |
        // .prototype? dunno

  - 'Calling methods (from inside the class)':
    - Ruby: |
        meth(args)
    - Python: |
        self.meth(args)
    - PHP: |
        $this->meth(args);
    - JavaScript: |
        this.meth(args);

  - 'Calling methods (elsewhere)':
    - Ruby: |
        instance.meth
        instance.meth(args)
    - Python: |
        instance.meth()
        instance.meth(args)
    - PHP: |
        $instance->meth(args);
    - JavaScript: |
        instance.meth(args);

  - Calling class methods:
    - Ruby: |
        ClassName.meth
        ClassName.meth(args)
    - Python: |
        ClassName.meth()
        ClassName.meth(args)
    - PHP: |
        ClassName::meth(args);
    - JavaScript: |
        ClassName.meth(args);

# ===============================================================================
- Variables:
# ===============================================================================

  - Local variables:
    - Ruby: |
        myvar = 1
        myvar
    - Python: |
        myvar = 1
        myvar
    - PHP: |
        $myvar = 1;
        $myvar
    - JavaScript: |
        var myvar = 1;
        myvar

  - Global variables:
    - Ruby: |
        $gvar = 1
    - Python: |
    - PHP: |
        global $gvar;
        $gvar = 1;
    - JavaScript: |
        window.gvar = 1;

  - Instance variables:
    - Ruby: |
        @var
        # private
    - Python: |
        self.var
        # public
    - PHP: |
        $this->var
    - JavaScript: |
       this.var

  - Class variables:
    - Ruby: |
        @@var
        # private
    - Python: |
        ClassName.var
        # public
    - PHP: |
        ClassName::$var
        // Consider static vars instead
    - JavaScript: |
        // ...

# ===============================================================================
- Properties:
# ===============================================================================

  - Getters:
    - Ruby: |
        def attr
          @attr
        end

        # or:
        attr_reader :attr
    - Python: |
        def get_attr(self):
          return self._attr
        attr = property(get_attr)
    - PHP: |
        public function __get($key) {
          if ($key == 'attr')
            { return $this->attr; }
        }
    - JavaScript: |

  - Setters:
    - Ruby: |
        def attr=(val)
          @attr = val
        end

        # or:
        attr_writer :attr
    - Python: |
        def set_attr(self, val):
          self._attr = val
        attr = property(None, set_attr)

        # Also: property(getter, setter,
        #                deleter, doc)
    - PHP: |
        public function __set($key, $val) {
          if ($key == 'attr')
            { $this->attr = $val; }
        }
    - JavaScript: |

  - Getting a property with an arbitrtary name:
    - Ruby: |
        obj.send :attr
        obj.send :'attr=', value
    - Python: |
        getattr(obj, 'attr')
        setattr(obj, 'attr', value)
    - PHP: |
        $obj->{'attr'}
        $obj->{'attr'} = $value;
    - JavaScript: |
        obj['attr'] // same as obj.attr

# ===============================================================================
- Constants:
# ===============================================================================

  - Common constants:
    - Ruby: |
        true
        false
        nil
    - Python: |
        True
        False
        None
    - PHP: |
        TRUE
        FALSE
        NULL
    - JavaScript: |
        true
        false
        null
        undefined

# ===============================================================================
- Methods:
# ===============================================================================

  - Declaring methods:
    - Ruby: |
        def meth(args)
          # ...
        end
    - Python: |
        def meth(self, args):
          # ...
    - PHP: |
        function meth(args) {
          // ...
        }
    - JavaScript: |
        // Many many ways
        Class.prototype.meth = function(args) {
          // ...
        }

  - Constructor:
    - Ruby: |
        def initialize
    - Python: |
        def __init__(self):
    - PHP: |
        public function __construct() {}
    - JavaScript: |
        // ...

  - Static methods:
    - Ruby: |
        def self.meth
    - Python: |
        @classmethod
        def meth(cls):
    - PHP: |
        public static function meth() {}
    - JavaScript: |
        Class.meth = function(args) {}

# ===============================================================================
- Anonymous functions:
# ===============================================================================

  - Anonymous functions:
    - Ruby: |
        fn = lambda { |x| x+1 }
        fn = -> { |x| x+1 } # Ruby 1.9
        fn.call(4)  #=> 5
    - Python: |
        fn = lambda x: x+1
        fn(4)  #=> 5
    - PHP: |
        $fn = create_function('$x', 'return $x+1;');
        $fn = function($x) { return $x+1; }; // 5.3
        $fn(4);  //=> 5
    - JavaScript: |
        var fn = function(x) { return x+1; }
        fn(4);  //=> 5

# ===============================================================================
- Namespaces:
# ===============================================================================

  - Namespaces:
    - Ruby: |
        # foo.rb
        module Foo
          class Bar
            # ...
          end
        end
        
        # elsewhere:
        $fb = Foo::Bar.new
    - Python: |
       # foo.py
       class Bar:
         pass
  
       # elsewhere:
       import foo
       fb = foo.Bar()
  
       # or:
       from foo import Bar
       fb = Bar()
    - PHP: |
       // foo.php
       namespace Foo;
       class Bar { /* ... */ }
  
       // elsewhere:
       $fb = new Foo\Bar();
    - JavaScript: |
       Foo = {
         Bar: function() { /* ... */ }
       };
  
       // elsewhere:
       var fb = new Foo.Bar();

# ===============================================================================
- Overriding:
# ===============================================================================

  - 'inst[i]':
    - Ruby: |
        def [](i)
    - Python: |
        def __getitem__(self, i):
    - PHP: |
    - JavaScript: |

  - 'Missing attrib/method':
    - Ruby: |
        def method_missing(meth, args, ...)
    - Python: |
        def __getattr__(self, attr):
    - PHP: |
        public function __get($attr) {}
        public function __set($attr, $v) {}
        public function __call($meth, $args) {}
    - JavaScript: |

  - 'ClassName()':
    - Ruby: |
    - Python: |
        # Calls the constructor
    - PHP: |
        public function __invoke() {}
    - JavaScript: |
        // Calls the constructor

# ===============================================================================
- String representation:
# ===============================================================================

  - Getting string representations:

    - Ruby: |
        obj.to_s
        obj.inspect
    - Python: |
        str(obj)
        repr(obj) # Attempts to make
                  # eval()'able output
    - PHP: |
        print_r($obj)
        var_export($obj) // eval()able
    - JavaScript: |

  - Overriding string representations:
    - Ruby: |
        def to_s
        def inspect
    - Python: |
        def __str__(self):
        def __repr__(self):
    - PHP: |
        public function __toString() { }
    - JavaScript: |

# ===============================================================================
- Casting:
# ===============================================================================

  - Casting:
    - Ruby: |
        obj.to_s
        obj.to_i
        obj.to_f
    - Python: |
        str(obj)
        int(obj)
        float(obj)
        bool(obj)
    - PHP: |
        (string) $obj
        (int) $obj
        (float) $obj
        (bool) $obj
    - JavaScript: |
        // ...
        parseInt($obj)

# ===============================================================================
- Arrays:
# ===============================================================================

  - Initializing (empty):
    - Ruby: |
        arr = Array.new
    - Python: |
        arr = list()
    - PHP: |
        $arr = [];
    - JavaScript: |
        // ...

  - Initializing (with contents):
    - Ruby: |
        arr = [1, 2, 3]
        # %w[red green]
    - Python: |
        arr = [1, 2, 3]
    - PHP: |
        $arr = array(1, 2, 3);
    - JavaScript: |
        var arr = [1, 2, 3];

  - Accessing items:
    - Ruby: |
        arr[0]
    - Python: |
        arr[0]
    - PHP: |
        $arr[0]
    - JavaScript: |
        arr[0]

  - Length:
    - Ruby: |
        arr.size #=> 3
    - Python: |
        arr.length #=> 3
    - PHP: |
        count(arr) //=> 3
    - JavaScript: |
        arr.count //=> 3

  - Adding items:
    - Ruby: |
        arr << 4        #=>   [1,2,3,4]
        arr.unshift(0)  #=> [0,1,2,3,4]
    - Python: |
        arr.append(4)      #=>   [1,2,3,4]
        arr.insert(0, 'X') #=> [X,1,2,3,4]
    - PHP: |
        array_push($arr, 4);     //=>   [1,2,3,4]
        array_unshift($arr, 0);  //=> [0,1,2,3,4]
    - JavaScript: |
        arr.push(4);    //=> [1,2,3,4]
        arr.unshift(0); //=> [0,1,2,3,4]

  - Removing items:
    - Ruby: |
        arr.pop   #=> 4
        arr       #=> [0,1,2,3]
        arr.shift #=> 0
        arr       #=> [1,2,3]
    - Python: |
        arr.pop()   #=> 4
        arr         #=> [0,1,2,3]
        arr.shift() #=> 0
        arr         #=> [1,2,3]
    - PHP: |
        array_pop($arr);   //=> 3
        $arr;              //=> [0,1,2,3]
        array_shift($arr); //=> 0
        $arr;              //=> [1,2,3]
    - JavaScript: |

  - Searching:
    - Ruby: |
        # .detect
        # .empty? .any?
    - Python: |
    - PHP: |
    - JavaScript: |

  - Sorting:
    - Ruby: |
    - Python: |
    - PHP: |
    - JavaScript: |

# ===============================================================================
- Hashes/Dictionaries:
# ===============================================================================

  - Initializing empty hashes:
    - Ruby: |
        Hash.new()
    - Python: |
        dict()
    - PHP: |
        array()
    - JavaScript: |
        {}

  - Initializing with contents:
    - Ruby: |
        { :red => 1, :green => 2 } 
        { red: 1, green: 2 } # Ruby 1.9
        Hash.new([['red',1], ['green',2]])
    - Python: |
        { 'red': 1, 'green': 2 }
        dict([['red',1], ['green',2]])
    - PHP: |
        array( 'red' => 1, 'green' => 2 )
    - JavaScript: |
        { red: 1, green: 2 }

  - Iterating hashes:
    - Ruby: |
        hash.each do |key, val|
    - Python: |
        for key, val in dict.iteritems():
    - PHP: |
        foreach ($hash as $key => $val) {}
        // Also array_walk()
    - JavaScript: |
        for (key in hash) {
          var value = hash[key];

# ===============================================================================
- Enumerables:
# ===============================================================================

  - Iterating:
    - Ruby: |
        mylist.each do |item|
    - Python: |
        for item in mylist:
    - PHP: |
        foreach ($mylist as $item) {}
        // Also array_walk()
    - JavaScript: |
        for (i in mylist) {
          var item = mylist[i];

  - Map:
    - Ruby: |
        mylist.map do |item|
          expr(item)
        end
    - Python: |
        map(lambda item: expr(item), mylist)
        # or:
        [expr(item) for item in mylist]
    - PHP: |
        array_map($mylist, 'callback')
    - JavaScript: |
        // underscore.js
        _.map(mylist, function(item) {
          // ...
        })

  - Inject:
    - Ruby: |
        mylist.inject do |acc, item|
          acc + item; acc
        end
    - Python: |
        reduce(
          lambda acc, item: acc + item,
          mylist)
    - PHP: |
    - JavaScript: |
        // underscore.js
        _.inject(mylist, function(acc, item) {
          // ...
        })

# ===============================================================================
- Files:
# ===============================================================================

  - Stuff:
    - Ruby: |
        File.join('dir', 'file')
        File.dirname
        File.dirname(__FILE__)
        ...
    - Python: |
        os.path.join('dir', 'file')
        os.path.split('dir/sub/file.txt')[0]
        os.path.split('dir/sub/file.txt')[1]
    - PHP: |
        basename()
        ...
    - JavaScript: |

  - File existence check:
    - Ruby: |
        if File.exists?(fname)
    - Python: |
        if os.path.isfile(fname):
    - PHP: |
        if (is_file($fname)) {}
    - JavaScript: |

  - Is directory check:
    - Ruby: |
        File.directory?(dname)
    - Python: |
        if os.path.isdir(dname):
    - PHP: |
        if (is_dir(dname)) {}
    - JavaScript: |

  - Quick reading:
    - Ruby: |
        data = File.open('f.txt') { |f| f.read }
    - Python: |
        with open('f.txt', 'r') as f:
          data = f.read()
    - PHP: |
        $data = file_get_contents('f.txt');
    - JavaScript: |

  - Quick writing:
    - Ruby: |
        File.open('f.txt', 'w') { |f| f << data }
    - Python: |
        with open('f.txt', 'w') as f:
          f.write(data)
    - PHP: |
        file_put_contents('f.txt', $data);
    - JavaScript: |

# ===============================================================================
- Printing:
# ===============================================================================

  - Printing:
    - Ruby: |
        puts "hello"
        p "hello"
    - Python: |
        print "hello"
    - PHP: |
        echo "hello";
        print "hello";
    - JavaScript: |
        document.writeln("hello");

  - Error output:
    - Ruby: |
        $STDERR << "Error\n"
    - Python: |
        sys.stderr.write("Error\n")
    - PHP: |
        fwrite(STDERR, "Error\n");
    - JavaScript: |
        console.log("hello");

# ===============================================================================
- Strings:
# ===============================================================================

  - Interpolation:
    - Ruby: |
        "Hi #{name}"
        'Hi %s' % name
        'Hi %{name}' % {name: name}
    - Python: |
        'Hi %s' % name
        'Hi %{name}' % {name: name}
    - PHP: |
        "Hi $name"
        "Hi {$name}"
        sprintf('Hi %s', $name)
    - JavaScript: |

  - 'Uppercase/lowercase':
    - Ruby: |
        "Hey".downcase
        "Hey".upcase
    - Python: |
        "Hey".upper()
        "Hey".lower()
        "hey you".title()       #=> 'Hey You'
        "hey you".capitalize()  #=> 'Hey you'
        "Hey you".swapcase()
    - PHP: |
        strtolower("Hey")
        strtoupper("Hey")
    - JavaScript: |
        "Hey".toUpperCase()
        "Hey".toLowerCase()

  - String length:
    - Ruby: |
        "Hello".size
    - Python: |
        len("Hello")
    - PHP: |
        strlen("Hello")
    - JavaScript: |
        "Hello".length

  - Substring:
    - Ruby: |
        str = "Hello world"
        str[1...5]   #=> 'ello'
        str[-5..-1]  #=> 'world'
        str[0...-4]  #=> 'Hello w'
    - Python: |
        str = "Hello world"
        str[1:5]  #=> 'ello'
        str[-5:]  #=> 'world'
        str[0:-4] #=> 'Hello w'
    - PHP: |
        $str = "Hello world";
        substr($str, 1, 4)   //=> 'ello'
        substr($str, -5)     //=> 'world'
        substr($str, 0, -4)  //=> 'Hello w'
    - JavaScript: |
        str = "Hello world";
        substr(str, 1, 4)   //=> 'ello'
        substr(str, -5)     //=> 'world'
        substr(str, 0, str.length-4)
        // str.substr(n, n) also works

  - Replacing:
    - Ruby: |
        'Hi'.gsub('i', 'ey')
    - Python: |
        'Hi'.replace('i', 'ey')
    - PHP: |
        str_replace('Hi', 'i', 'ey')
    - JavaScript: |
        'Hi'.split('i').join('ey')

  - Finding:
    - Ruby: |
        'Hi'.include?('i')  #=> true
    - Python: |
        'Hi'.find('i')
        'Hi'.find('o')  #=> -1
    - PHP: |
        strchr()
        strpos('Hi', 'i')
        strpos('Hi', 'o') //=> -1
    - JavaScript: |
        'Hi'.indexOf('i')
        'Hi'.indexOf('o')  //=> -1

# ===============================================================================
- Numbers:
# ===============================================================================

  - Rounding off:
    - Ruby: |
    - Python: |
    - PHP: |
    - JavaScript: |
        Math.floor(2.5) // 2

  - Exponents:
    - Ruby: |
        2**8 #=> 256
    - Python: |
        import math
        math.pow(2, 8) #=> 256
    - PHP: |
    - JavaScript: |
        Math.pow(2, 8) #=> 256

  - Trigonometry:
    - Ruby: |
        # Radians assumed
        Math.sin(theta)
        Math::PI #=> 3.14159...
    - Python: |
        # Radians assumed
        import math
        math.sin(theta)
        math.pi #=> 3.14159...
    - PHP: |
        // Radians assumed
        sin(theta)
        sin(deg2rad(angle))
        pi() // or M_PI => 3.14159...
    - JavaScript: |
        Math.sin(theta)
        Math.PI //=> 3.14159...
